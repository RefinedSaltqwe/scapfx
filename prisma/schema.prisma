// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String 
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  password          String
  type              String    @default("CLIENT")
  emailVerified     DateTime?
  image             String?
  forgotPasswordId  String?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  ownedPresets      PresetUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Junction Table (Many-to-Many) with Optional User
model PresetUser {
  id                String  @id @default(cuid())  // Unique identifier (Primary Key)
  userEmail         String  // Can store an email even if the user isn't registered
  presetId          String
  createdAt         DateTime @default(now())
  stripeSessionId   String
  legalAgreement  Boolean?
  orderId           String? 
  purchasedPrice    Float?
  totalAmountPaid     Float?

  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  preset    Preset  @relation(fields: [presetId], references: [id], onDelete: Cascade)

  @@unique([id]) // Ensures a user (or guest email) can't have duplicate presets
}



model Preset {
  id                 String   @id @default(cuid())
  productId          String   @unique
  name               String
  heroImg            String
  description        String
  price              Float
  prevPrice          Float
  color              String
  createdAt         DateTime @default(now())
  beforeAfterImages  BeforeAfter[]
  inclusions         Inclusions[]
  users              PresetUser[]
  gallery            Gallery[]
}


model BeforeAfter {
    id                  String @id @default(cuid())
    presetId            String
    beforeImage         String
    afterImage          String
    sequence            Float?

    preset             Preset @relation(fields: [presetId], references: [id], onDelete: Cascade)
}

model Inclusions  {
    id                   String @id @default(cuid())
    presetId             String
    name                 String
    description          String

    preset               Preset @relation(fields: [presetId], references: [id], onDelete: Cascade)
}

model Gallery {
  id                      String @id @default(cuid())
  link                    String
  presetId                String
  sequence                Float?

  preset                  Preset @relation(fields: [presetId], references: [id], onDelete: Cascade)
}